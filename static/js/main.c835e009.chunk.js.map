{"version":3,"sources":["components/Button.js","components/Header.js","components/Task.js","components/Tasks.js","components/AddTask.js","App.js","reportWebVitals.js","index.js"],"names":["Button","color","text","onClick","className","style","backgroundColor","defaultProps","Header","title","onAdd","showAdd","Task","task","onDelete","onToggle","reminder","onDoubleClick","id","cursor","date","Tasks","tasks","map","AddTask","useState","setText","Date","day","setDay","setReminder","onSubmit","e","preventDefault","toLocaleDateString","month","year","alert","type","placeholder","value","onChange","target","checked","currentTarget","App","showAddTask","setShowAddTask","setTasks","Math","floor","random","newTask","length","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c835e009.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\n\r\nconst Button = ({ color, text, onClick }) => {\r\n  return (\r\n    <button\r\n      className=\"btn\"\r\n      onClick={onClick}\r\n      style={{ backgroundColor: color }}\r\n    >\r\n      {text}\r\n    </button>\r\n  );\r\n};\r\n\r\nButton.defaultProps = {\r\n  color: \"red\",\r\n};\r\n\r\nButton.propTypes = {\r\n  text: PropTypes.string,\r\n  color: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n};\r\n\r\nexport default Button;\r\n","import PropTypes from \"prop-types\";\r\nimport Button from \"./Button\";\r\n\r\nconst Header = ({ title, onAdd, showAdd }) => {\r\n  return (\r\n    <header className=\"header\">\r\n      <h1>{title}</h1>\r\n      <Button\r\n        color={showAdd ? \"red\" : \"green\"} //changes button color on condition of showAdd\r\n        text={showAdd ? \"Close\" : \"Add\"} //changes text on button on condition of showAdd\r\n        onClick={onAdd}\r\n      />\r\n    </header>\r\n  );\r\n};\r\n\r\nHeader.defaultProps = {\r\n  // defaultProps sets the default value for Header.title\r\n  title: \"Task Manager\",\r\n};\r\n\r\nHeader.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  //this will specify that title ought to be string, and should not be left empty\r\n};\r\n\r\nexport default Header;\r\n","import { FaTimes } from \"react-icons/fa\";\r\n\r\nconst Task = ({ task, onDelete, onToggle }) => {\r\n  return (\r\n    <div\r\n      className={`task ${task.reminder ? \"reminder\" : \"\"}`}\r\n      onDoubleClick={() => onToggle(task.id)}\r\n    >\r\n      <h3>\r\n        {task.text}{\" \"}\r\n        <FaTimes\r\n          style={{ color: \"red\", cursor: \"pointer\" }}\r\n          onClick={() => onDelete(task.id)}\r\n        />\r\n      </h3>\r\n      <p>{task.date} </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Task;\r\n","import Task from \"./Task\";\r\n\r\nconst Tasks = ({ tasks, onDelete, onToggle }) => {\r\n  return (\r\n    <>\r\n      {tasks.map((task) => (\r\n        <Task\r\n          key={task.id}\r\n          task={task}\r\n          onDelete={onDelete}\r\n          onToggle={onToggle}\r\n        />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Tasks;\r\n","import { useState } from \"react\";\r\nimport DatePicker from \"react-date-picker\";\r\n\r\nconst AddTask = ({ onAdd }) => {\r\n  const [text, setText] = useState(\"\");\r\n  const [day, setDay] = useState(new Date());\r\n  const [reminder, setReminder] = useState(false);\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault(); //prevent submitting to a page\r\n\r\n    if (!text) {\r\n      alert(\"Please add a task\");\r\n      return; //this will exit the function\r\n    }\r\n\r\n    //this will capture the entries and send it up to onAdd in App.js\r\n    let date = day.toLocaleDateString(\"en-GB\", {\r\n      day: \"2-digit\",\r\n      month: \"short\",\r\n      year: \"numeric\",\r\n    });\r\n    onAdd({ text, date, reminder });\r\n\r\n    //below will clear the form after entries are capture by onAdd\r\n    setText(\"\");\r\n    setDay(new Date());\r\n    setReminder(false);\r\n  };\r\n\r\n  return (\r\n    <form className=\"add-form\" onSubmit={onSubmit}>\r\n      <div className=\"form-control\">\r\n        <label>Task</label>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Add Task\"\r\n          value={text}\r\n          onChange={(e) => setText(e.target.value)}\r\n        />\r\n      </div>\r\n      <div className=\"form-control\">\r\n        <label>Date & Time</label>\r\n        <DatePicker\r\n          //type=\"text\"\r\n          //placeholder=\"Add Date & Time\"\r\n          //dateFormat=\"dd MM yyyy\"\r\n          value={day}\r\n          onChange={(e) => setDay(e)}\r\n        />\r\n      </div>\r\n      <div className=\"form-control form-control-check\">\r\n        <label>Set Reminder</label>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={reminder}\r\n          value={reminder}\r\n          onChange={(e) => setReminder(e.currentTarget.checked)}\r\n        />\r\n      </div>\r\n\r\n      <input className=\"btn btn-block\" type=\"submit\" value=\"Save Task\" />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default AddTask;\r\n","import Header from \"./components/Header\";\r\nimport Tasks from \"./components/Tasks\";\r\nimport AddTask from \"./components/AddTask\";\r\n\r\nimport { useState } from \"react\";\r\n\r\nconst App = () => {\r\n  const [showAddTask, setShowAddTask] = useState();\r\n  const [tasks, setTasks] = useState([\r\n    {\r\n      id: 1,\r\n      text: \"Running\",\r\n      date: \"15 Feb 2021\",\r\n      reminder: true,\r\n    },\r\n    {\r\n      id: 2,\r\n      text: \"Swimming\",\r\n      date: \"15 Feb 2021\",\r\n      reminder: true,\r\n    },\r\n  ]);\r\n\r\n  //Add Task\r\n  const addTask = (task) => {\r\n    //generate a random number between 1 and 10000\r\n    const id = Math.floor(Math.random() * 10000) + 1;\r\n    const newTask = { id, ...task };\r\n    setTasks([...tasks, newTask]); //...tasks is to copy in the current tasks, followed by the newTask\r\n  };\r\n\r\n  //Delete task\r\n  const deleteTask = (id) => {\r\n    setTasks(tasks.filter((task) => task.id !== id));\r\n  };\r\n\r\n  //Toggle Reminder\r\n  const toggleReminder = (id) => {\r\n    setTasks(\r\n      tasks.map((task) =>\r\n        task.id === id ? { ...task, reminder: !task.reminder } : task\r\n      )\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Header\r\n        title=\"Task List\"\r\n        onAdd={() => setShowAddTask(!showAddTask)}\r\n        showAdd={showAddTask}\r\n      />\r\n      {showAddTask && <AddTask onAdd={addTask} />}\r\n      {tasks.length > 0 ? (\r\n        <Tasks tasks={tasks} onDelete={deleteTask} onToggle={toggleReminder} />\r\n      ) : (\r\n        \"No Task to Display\"\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}